master tables are those tables
in which client user won't enter any data
but the data will be entered mostly by admin

New web application->
   ProjectName -EShopWeb
   check dedicated folder
   keep lib folder

  context path - /eshop

finish

---------------------------------
Let's sample run it

************************************************************************
type on google-> free css templates

neaty template

URL - https://www.free-css.com/free-css-templates/page239/neaty

Download and Extract it
************************************************************************
make a folder assets in Web pages folder

copy paste the img ,css,js folders of template

Delete the index.html inside web application folder

Create a index.jsp inside Web Pages folder

Delete the tags of the page beside the first tag
***************************************************************************
copy all the html of index.html from template to index.jsp 

When we will run the project, we will only see structure

We have to change path of css,js,images

Put assets/ in all css paths

js file will be in last and css file at top

put assets/ in front of all js files

change all images path using search and replace to assets/img/ in place of img/ . You will find 27 matches

****************************************************************
Change title of template to Eshop -Nice Place for shopping

Change H1 heading of logo to Eshop (below /head)

Now we want to avoid repetition. because menu part will be on each page

Copy from top till left menu closes and cut it
make a folder blocks, create a new jsp named header.jsp and paste all content here that you cut till left column code

Now in index.jsp,

write <%@include file="blocks/header.jsp"%>   tag
Now all content will be showed

Now copy all content below right column div and put it in a new jsp called footer.jsp

Again put below <%@include file="blocks/footer.jsp"%> tag in belowmost

So what happenings if code of these footer and headers files gets merged up here

Remove the footer copyright details

Delete gallery sections

Move to header.jsp
Remove the unnecessary menus
Keep the Welcome Menu and change it to Home
Remove the figure1 image in top of index.jsp
************************************************************************************
Let's test this is working or not

Let's put <%!int num=10; %> in header.jsp

 and put <h1><%=num%></h1> in div tag

Now on running 100 is coming, that is the proof that this jsp code gets merged

*************************************************************************************
There is another way to include jsp

<jsp:include page="blocks.header.jsp"/>

On using this,
header.jsp will run on its own servlet
Then the output/result will get shown up here from header.jsp to index.jsp

Now , in this case num variable won't run. this will give error

*************************************************************************************
Let's delete the num code

Delete the gallery etc code. That is not required now

put a h1 to Eshop

remove extra li's beside Home

***************************************************************
Let's create another jsp -category

<@include file="blocks/header.jsp"%>
<div class="tm-right-column">
	<div class="tm-content-div">
		<h1>Categoy Page</h1>
	</div>
</div>

<%@include file="blocks/footer.jsp"%>

Make same like this a sub-category page 
****************************************************************************
Let's come back to header

Insert these 3 in 3 li tags
<a href="index.jsp" >Home</a>
<a href="category.jsp">Category</a>
<a href="subcategory.jsp">Subcategory</a>

But this will not work

the a tag is made to work for inpage sections
the a tag is not made for different pages

Delete this code

 $('.tm-main-nav').singlePageNav({
                    'currentClass' : "active",
                    offset : 20
                });
Deleting  this singlepage code of jquery in footer.jsp javascript
and all the codes will work

*************************************************************************
MVC: Model View Controller

Model: Database and business logic
Controller: Req/Response handler
View: JSP i.e. our html css (presentation)

View>>Controller>>Model
Model>>Controller>>>View

user will see view
request from view will go to controller
controller will request data from model
model will do database query
model will give data to controller which will respond and result will be
shown on view

dao>>Data access object, it will help you access data from database
dto>>data transfer object,

dto: POJO class , our model and functions
dao: JDBC code will be here only

Make a root package com.adroit.eshop

Make a package com.adroit.eshop.controller  (Here we will keep servlets)

Make another package com.adroit.eshop.dao and com.adroit.eshop.dto

Make another package com.adroit.eshop.service for writing some extra code

********************************************************************************
In dto package , make a class Category.java

public class Category
{
 private int cateId;
 private String cateName;
  
 public Category(){
 }

 make empty and parametrised constructors and getters and setters 

*************************************** 
Add MYSQL jar file library in libraries

In dao package, make a interface BaseDao.java

import java.util.ArrayList;

public interface BaseDao<T>
{
 boolean save(T ob);
 boolean update(T ob);
 T get(int id);
 ArrayList<T> list();
}
//we are not including delete here because we rarely delete data
//the data just gets hidden but we can make this if we want

make class DBConnection.java

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DBConnection
{
  public static Connection getConnection() throws ClassNotFoundException,SQLException
  {
    Class.forName("com.mysql");
    Connection cnn=DriverManager.getConnection("....");
    return cnn;
  }
}

CategoryDao.java
-------------------
import com.adroit.eshop.dto.Category;
import java.util.ArrayList;
import java.sql.Connection;
import java.sql.*;

public class CategoryDao implements BaseDao<Category>
{

 public boolean save(Category ob)
 {
    try(Connection cnn=DBConnection.getConnection()) //this is possible because Connection has closeable interface, 
							//so java will automatically close it
    {
      String query="insert into category(cate_name)"
         +"value(?)";
      PreparedStatement stm=cnn.prepareStatement(query);
      stm.setString(1,ob.getCateName());
      int i=stm.executeUpdate();
      if(i>0)
           return true;
    }
    catch(Exception ex)
     {
       System.err.println("Category Save Error"+ex.getMessage());
     }
     return false;
   }

 public boolean update(Category ob)
 {
   try(Connection cnn=DBConnection.getConnection()) 
    {
      String query="update category set cate_name=?"
         +"where cate_id=?";
      PreparedStatement stm=cnn.prepareStatement(query);
      stm.setString(1,ob.getCateName());
      stm.setInt(2,ob.getCateId());
      int i=stm.executeUpdate();
      if(i>0)
           return true;
    }
    catch(Exception ex)
     {
       System.err.println("Category Update Error"+ex.getMessage());
     }
     return false; 
   }

  @Override
    public Category get(int id) {
        Category ob=null;    
        try(Connection cnn=DBConnection.getConnection()) 
            {
            String query="select * from category"
             +"where cate_id=?";
            PreparedStatement stm=cnn.prepareStatement(query);
            stm.setInt(1,id);
      
            ResultSet rs=stm.executeQuery();
            if(rs.next())
            {
            int cid=rs.getInt("cate_id");
            String cname=rs.getString("cate_name");
            ob=new Category(cid,cname);
            }
        }
    catch(Exception ex)
     {
       System.err.println("Category Get Error"+ex.getMessage());
     }
     return ob; 
    }
    
   @Override
    public ArrayList<Category> list() {
         ArrayList<Category> clist=new ArrayList<>();
        try(Connection cnn=DBConnection.getConnection()) 
    {
     
      String query="select * from category";
      PreparedStatement stm=cnn.prepareStatement(query);
      ResultSet rs=stm.executeQuery();
      while(rs.next())
        {
          int cid=rs.getInt("cate_id");
          String cname=rs.getString("cate_name");
          Category ob=new Category(cid,cname);
	  clist.add(ob);
        }
    }
    catch(Exception ex)
     {
       System.err.println("Category List Error"+ex.getMessage());
     }
     return clist; 
    }
}
